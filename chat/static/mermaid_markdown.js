// mermaid_markdown.js
// --------------------------------------------------
// This file provides helpers to convert a text string
// (possibly containing Markdown and Mermaid code blocks)
// into HTML, and then initialize Mermaid diagrams.
// It now includes detailed error display for invalid Mermaid syntax.
// --------------------------------------------------

// Convert raw markdown text into HTML using Marked.js
// and then return the HTML string
function convertMarkdownToHtml(text) {
    // Use the 'marked' library loaded in chat.html via CDN
    // Ensure marked is configured to highlight code blocks
    // (This seems to be the default behavior when it finds ```mermaid)
    return marked.parse(text);
}

// Initialize/Render Mermaid diagrams inside the given container
// Now includes detailed error reporting in the UI.
function renderMermaidDiagrams(container) {
    const mermaidBlocks = container.querySelectorAll('pre code.language-mermaid'); // Target the inner code element generated by marked.js
    mermaidBlocks.forEach((block) => {
        const diagram = block.textContent || ''; // Get the raw diagram code
        const preElement = block.parentNode; // Get the parent <pre> element for context

        try {
            // 1. Attempt to PARSE the diagram first.
            // This synchronously throws an error if the syntax is invalid.
            // mermaid.parse() also populates mermaid.parseError on failure.
            mermaid.parse(diagram);

            // 2. If parsing succeeds, prepare the block for rendering.
            // Mermaid API expects the raw text in a div with class="mermaid".
            // Replace the <pre><code> structure with a simple <div class="mermaid">
            const mermaidContainer = document.createElement('div');
            mermaidContainer.className = 'mermaid';
            mermaidContainer.textContent = diagram;
            preElement.parentNode.replaceChild(mermaidContainer, preElement);

            // 3. Initialize/render the valid diagram using the new container.
            // We don't need the ID argument if we provide the element.
            mermaid.init(undefined, mermaidContainer);

        } catch (error) {
            console.error("Mermaid rendering/parsing error:", error);
            console.error("Mermaid parseError object:", mermaid.parseError); // Log the specific parse error object

            // 4. If parsing fails, display a detailed error message.

            // Try to get details from mermaid.parseError or the caught error
            const parseErrorDetails = mermaid.parseError || {}; // Use empty object if undefined/null
            const errorMessage = error.message || 'Unknown error during parsing/rendering.';

            // Extract line number - structure might vary slightly between versions
            let errorLine = null;
            if (parseErrorDetails.hash?.loc?.first_line) {
                errorLine = parseErrorDetails.hash.loc.first_line;
            } else if (typeof error.str === 'string' && error.str.includes('lexer error') && error.hash?.line) {
                // Handle potential lexer errors which might have different structure
                errorLine = error.hash.line;
            }

            const expected = parseErrorDetails.hash?.expected?.join(', ') || 'N/A';
            const foundTokenMatch = error.message.match(/found: '([^']*)'/); // Try to extract token from message
            const foundToken = foundTokenMatch ? foundTokenMatch[1] : (parseErrorDetails.hash?.token || 'N/A');

            // Create error message element
            const errorDiv = document.createElement('div');
            errorDiv.className = 'mermaid-error-display bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mt-2 mb-2'; // Use distinct class

            // Split diagram into lines to show context and highlight
            const lines = diagram.split('\n');

            // Escape HTML function
            const escapeHtml = (unsafe) => {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            };

            errorDiv.innerHTML = `
                <p class="font-bold">Mermaid Syntax Error</p>
                <p class="text-sm"><strong>Details:</strong> ${escapeHtml(errorMessage)}</p>
                ${errorLine !== null ? `<p class="text-sm"><strong>Line number:</strong> ${errorLine}</p>` : ''}
                ${expected !== 'N/A' ? `<p class="text-sm"><strong>Expected:</strong> ${escapeHtml(expected)}</p>` : ''}
                ${foundToken !== 'N/A' ? `<p class="text-sm"><strong>Found:</strong> '${escapeHtml(foundToken)}'</p>` : ''}
                <p class="text-sm font-bold mt-2">Diagram code (line ${errorLine || 'N/A'} highlighted):</p>
                <pre class="text-xs mt-2 overflow-x-auto bg-gray-100 p-2 rounded">${lines.map((line, i) => {
                    const currentLine = i + 1;
                    const isErrorLine = currentLine === errorLine;
                    // Apply highlighting class and escape HTML entities in the code line
                    return `<div class="${isErrorLine ? 'bg-red-200 font-bold' : ''}">${String(currentLine).padStart(3, ' ')}: ${escapeHtml(line)}</div>`;
                }).join('\n')}</pre>
            `;

            // Replace the original <pre> block with the error message
            if (preElement.parentNode) {
                preElement.parentNode.replaceChild(errorDiv, preElement);
            } else {
                console.error("Could not find parent node to insert Mermaid error message.");
                // As a fallback, maybe append to container? Or just rely on console.
            }
        }
    });
}


// A convenience function that converts markdown to HTML
// and then triggers mermaid rendering for any mermaid blocks found.
function renderMermaidMarkdown(text, container) {
    // Convert markdown to HTML using Marked.js
    const html = convertMarkdownToHtml(text);

    // Place generated HTML into the container
    container.innerHTML = html;

    // Now find Mermaid blocks within the generated HTML and render them (or display errors)
    renderMermaidDiagrams(container);
}

// Expose these functions to other scripts if needed (though chat.js only uses renderMermaidMarkdown)
window.convertMarkdownToHtml = convertMarkdownToHtml;
window.renderMermaidDiagrams = renderMermaidDiagrams;
window.renderMermaidMarkdown = renderMermaidMarkdown;